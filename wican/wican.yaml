esphome:
  name: ${name}
  name_add_mac_suffix: true
mdns:
  disabled: true
# enable hass api TODO: mqtt
api:
  encryption:
    key: "oz8pL8c0INEcq+dL//08pwPrtI+fa7O4cHsEcELqKzM="
# enable ota update
ota:
  - platform: esphome
    password: "monitor"
logger:
wifi:
  id: wlan
  domain: ".gob.zone"
  fast_connect: false
  reboot_timeout: "0s"
  enable_on_boot: false
  networks:
    - ssid: "gob"
      password: "pfefferpapageiknotenhaken"
    - ssid: "kolossus"
      password: "penisfisch"
esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf
#logger:
#  level: INFO #NONE# ERROR #INFO #DEBUG  #VERBOSE
#  #baud_rate: 0 #to disable logging via UART
#  logs:
#    text_sensor : ERROR
#    canbus: INFO
esp32_ble:
  id: ble
  io_capability: none
esp32_ble_server:
  id: bles
  manufacturer_data: [0xFF, 0xFF, 0xF1, 0x00]
output:
  - id: blue_led_output
    platform: gpio
    pin: 7
  - id: green_led_output
    platform: gpio
    pin: {number: 8, inverted: true}
  - id: yellow_led_output
    platform: gpio
    pin: {number: 9, inverted: true}
light:
  - platform: binary
    id: blue_led
    output: blue_led_output
    restore_mode: ALWAYS_OFF
    name: "blue"
  - platform: binary
    id: green_led
    output: green_led_output
    restore_mode: ALWAYS_OFF
    name: "green"
  - platform: binary
    id: yellow_led
    output: yellow_led_output
    restore_mode: ALWAYS_OFF
    name: "yellow"
canbus:
  - platform: esp32_can
    tx_pin: 0
    rx_pin: 3
    bit_rate: 500kbps
    can_id: 0 # mandatory but we do not use it
    on_frame:
      # dump all frames to log
      - can_id: 0x00000025
        #can_id_mask: 0
        then:
          - lambda: |-
              auto data_pretty = remote_transmission_request ? "n/a" : format_hex_pretty(x).c_str();
              ESP_LOGI("eup_dump", "can_id: 0x%08x, rtr: %d, length: %d, content: %s", can_id, remote_transmission_request, x.size(), data_pretty);
              ESP_LOGI("eup_dump", "angle: %f", (float)((int16_t)(x[1]<< 8) + x[0])*1.5);
      - can_id: 0x00000025
        then:
          - lambda: |-
              if (x.size() >= 5)
                id(steer_angle).publish_state((float)((int16_t)(x[1]<< 8) + x[0])*1.5);
sensor:
  - platform: template
    id: steer_angle
    name: '${name} Steering Angle'
    unit_of_measurement: 'Â°'
    accuracy_decimals: 0
  - platform: adc
    id: starter_battery_voltage
    name: '${name} Battery Voltage'
    pin: 4
    attenuation: 12db # https://github.com/meatpiHQ/wican-fw/blob/bf212132f8e506f2c520e917daf86e53a1070302/main/sleep_mode.c#L234
    filters:
      - lambda: return x * 116 / 16; # https://github.com/meatpiHQ/wican-fw/blob/bf212132f8e506f2c520e917daf86e53a1070302/main/sleep_mode.c#L397
    update_interval: 1s
    samples: 1
    unit_of_measurement: V
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    on_value:
      then:
        - lambda: |-
            if (id(starter_battery_voltage).state >= 12.9) {
              // car running
              id(ds).prevent_deep_sleep();
              if (id(ble).is_active() && esp_ble_tx_power_get(ESP_BLE_PWR_TYPE_ADV) != ESP_PWR_LVL_P9) {
                esp_err_t err = esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_ADV, ESP_PWR_LVL_P9);
                if (err != ESP_OK) {
                  // TODO: esphome logging
                  //ESP_LOGW(TAG, "esp_ble_tx_power_set failed: %s", esp_err_to_name(err));
                }
              }

            } else if (id(starter_battery_voltage).state < 12.9 && id(starter_battery_voltage).state > 6) {
              // car off
              id(ds).allow_deep_sleep();

            } else if (id(starter_battery_voltage).state <= 6) {
              // powered via usb.
              id(ds).prevent_deep_sleep();
              id(wlan).enable();
            }

            // emit via ble
            if (id(ble).is_active()) {
               float f_value = id(starter_battery_voltage).state;
               uint8_t* float_data = (uint8_t*)&f_value;
               id(bles).set_manufacturer_data({0xFF,0xFF,0xF9,float_data[0], float_data[1], float_data[2], float_data[3]});
            }
deep_sleep:
  id: ds
  run_duration: 8s
  sleep_duration: 60s # every min should be enough
